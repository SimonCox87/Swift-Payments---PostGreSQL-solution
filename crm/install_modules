#!/bin/bash

# Function to install Node.js and npm if not installed
install_node() {
    echo "Checking Node.js and npm installation..."
    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
        echo "Node.js or npm is not installed. Attempting to install..."
        
        if [[ "$OSTYPE" == "darwin"* ]]; then
            if ! command -v brew &> /dev/null; then
                echo "Homebrew is not installed. Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                echo "Homebrew installation complete."
            fi
            brew install node
        elif [[ -f "/etc/debian_version" ]]; then
            sudo apt update
            sudo apt install -y nodejs npm
        elif [[ -f "/etc/redhat-release" ]]; then
            sudo yum install -y nodejs npm
        else
            echo "Unsupported OS. Please install Node.js manually."
            exit 1
        fi

        echo "Node.js and npm installation complete."
    else
        echo "Node.js and npm are already installed."
    fi
}

# Function to install dependencies and handle frontend-specific issues
setup_project() {
    local dir=$1
    local name=$2

    echo "Setting up $name in $dir..."

    cd "$dir" || exit

    if [ -f "package.json" ]; then
        echo "Installing dependencies for $name..."
        
        # Remove package-lock.json if it exists (fix for ajv dependency issue)
        if [ -f "package-lock.json" ]; then
            echo "Removing package-lock.json to avoid version conflicts..."
            rm -f package-lock.json
        fi
        
        npm install
        if [ ! -d "node_modules" ]; then
            echo "Error: Dependencies not installed correctly in $dir."
            exit 1
        fi
    else
        echo "package.json not found in $dir. Please ensure it exists."
        exit 1
    fi
}

# Function to install PostgreSQL if not installed
install_postgresql() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Installing PostgreSQL on macOS..."
        if ! command -v brew &> /dev/null; then
            echo "Homebrew is not installed. Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        brew install postgresql
        brew services start postgresql
    elif [[ -f "/etc/debian_version" ]]; then
        echo "Installing PostgreSQL on Debian/Ubuntu..."
        sudo apt update
        sudo apt install -y postgresql postgresql-contrib
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    elif [[ -f "/etc/redhat-release" ]]; then
        echo "Installing PostgreSQL on Red Hat/CentOS..."
        sudo yum install -y postgresql-server postgresql-contrib
        sudo postgresql-setup initdb
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    else
        echo "Unsupported OS for automatic PostgreSQL installation."
        exit 1
    fi
}

# Function to configure PostgreSQL and set up the database
configure_postgresql() {
    local init_sql_path="$1"

    echo "Configuring PostgreSQL..."

    if [[ "$OSTYPE" == "darwin"* || "$OSTYPE" == "linux-gnu"* ]]; then
        echo "Updating permissions for $init_sql_path..."
        sudo chmod 644 "$init_sql_path"
        sudo chown postgres:postgres "$init_sql_path"
    fi

    if [ ! -f "$init_sql_path" ]; then
        echo "Error: init.sql not found at $init_sql_path."
        exit 1
    fi

    sudo -u postgres psql <<EOF
    ALTER USER postgres PASSWORD 'postgres';
    CREATE DATABASE crm;
    \c crm
    \i '$init_sql_path'
EOF
    echo "PostgreSQL setup complete. Database 'crm' created with data from init.sql."
}

# Main script execution
install_node

# Backend setup
setup_project "./server" "Backend"

# Frontend setup
setup_project "../client" "Frontend"

# Install and configure PostgreSQL
if ! command -v psql &> /dev/null; then
    install_postgresql
else
    echo "PostgreSQL is already installed."
fi

# Ensure we are in the correct directory to access init.sql
cd .. || exit

# Path to init.sql # This is wrong
INIT_SQL_PATH="$(pwd)/init.sql"

# Configure PostgreSQL
# Configure PostgreSQL
if [ ! -f "$INIT_SQL_PATH" ]; then
    echo "Error: init.sql not found at $INIT_SQL_PATH."
    exit 1
fi

configure_postgresql "$INIT_SQL_PATH"

# Instructions to start frontend and backend servers
echo "Setup is complete. You can now start your servers."

read -p "Would you like to start the backend server now? (Y to start): " start_backend
if [[ "$start_backend" == "Y" || "$start_backend" == "y" ]]; then
    echo "Starting backend server..."
    cd ./server || exit
    npm start
else
    echo "Skipping backend server start. You can start it manually later."
fi

read -p "Would you like to start the frontend server now? (Y to start): " start_frontend
if [[ "$start_frontend" == "Y" || "$start_frontend" == "y" ]]; then
    echo "Starting frontend server..."
    cd ../client || exit
    npm start
else
    echo "Skipping frontend server start. You can start it manually later."
fi
